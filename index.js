import express, { json } from 'express';
import Sequelize, { INTEGER, STRING, ValidationError } from 'sequelize';

const app = express();
const port = 3000;
app.use(json());

const sequelize = new Sequelize('postgres://postgres:1234@localhost:5432/catalogo-produtos');

const CatalogoDeProdutos = sequelize.define(
    'produto',
    {
        id: {
            type: INTEGER,
            allowNull: false,
            autoIncrement: true,
            primaryKey: true
        },
        nome: {
            type: STRING,
        },

        descricao: {
            type: STRING
        }
    },
    {}
)
sequelize.authenticate()
    .then(async () => {
        console.log('Conexão com o banco de dados realizada com sucesso!')

        try {
            await CatalogoDeProdutos.sync({ force: false })
        } catch (error) {
            console.error('erro do sync', error)
        }

    })
    .catch(err => {
        console.error('Não foi possível conectar ao banco de dados: ', err);
    });

app.get('/produto', async (req, res) => {
    try {

        let produtos;

        if (req.query.nome != undefined) {

            produtos = await CatalogoDeProdutos.findAll(
                {
                    where: {
                        nome: req.query.nome
                    }
                }
            )

        } else {
            produtos = await CatalogoDeProdutos.findAll({})
        }

        res.json({ produtos })

    } catch (error) {
        console.error(error)
        res.status(412).send(new Error('Precondition Failed'))
    }
})


app.post('/produto', async (req, res) => {

    const produto = new CatalogoDeProdutos(req.body)

    try {
        await produto.save();
        res.status(201).json(produto);
    }
    catch (err) {

        const produto_object = Object.keys(CatalogoDeProdutos.rawAttributes)
            .filter(key => !CatalogoDeProdutos.rawAttributes[key]._autoGenerated)
            .map(key => {
                return {
                    field: CatalogoDeProdutos.rawAttributes[key].field,
                    type: CatalogoDeProdutos.rawAttributes[key].type.key,
                    optinonal: CatalogoDeProdutos.rawAttributes[key].allowNull !== false
                }
            })


        if (err instanceof ValidationError) {
            res.status(400).send(produto_object)
        } else {
            throw new Error('Erro no servidor')
        }
    }
})

app.put('/produto/:id', async (req, res) => {

    const id = req.params.id
    try {

        await CatalogoDeProdutos.update(
            {
                nome: (req.body.nome == null) ? null : req.body.nome,
                descricao: (req.body.descricao == null) ? null : req.body.descricao
            },
            {
                where: {
                    id: id
                }
            }
        )
        const produtoConsulta = await CatalogoDeProdutos.findByPk(id)
        if (!produtoConsulta) {
            res.status(404).send(new Error('Produto não encontrado'))
        }
        else {
            res.json({ produtoConsulta })

        }
    }
    catch (error) {
        console.error(error)
        res.status(412).send(new Error('Precondition Failed'))
    }
})

app.delete('/produto/:id', async (req, res) => {
    const id = req.params.id
    try {
        const produtoDeletado = await CatalogoDeProdutos.destroy(
            {
                where: {
                    id: id
                }
            }
        )
        if (produtoDeletado) {
            res.status(204).send()
        }
        else {
            res.status(404).send(new Error('Produto não encontrado'))
        }
    } catch (error) {
        console.error(error)
        res.status(412).send(new Error('Precondition Failed'))
    }
})


app.listen(port, () => console.log(`A porta ${port} está funcionando!`))
